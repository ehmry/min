'min-highlight require :min-highlight

'hastysite import
'min-highlight import

() :modules

;Routing
(
  symbol set-destination
  (dict :meta ==> dict :result)
  (
    meta /id :id
    meta /ext :ext
    (
      ((id "home" ==) (
        meta (
          ("index" %id)
          (".html" %ext)
        ) tap
      ))
      ((ext ".md" ==) (
        meta (
          (".html" %ext)
          ("$1/index" (id) => % %id)
        ) tap
      ))
    ) case
    @result
  )
) ::

;Processing operators
(
  symbol process-md-with-template
  (dict :meta 'sym :tpl ==> dict :result)
  (
    "" :page
    "" :contents
    meta (
      (input-fread @contents meta)
      (settings /title %site)
      (settings /version %version)
      (
        :temp contents temp markdown 
        highlight-codeblocks highlight-codes @contents temp
      )
      (contents %contents)
      (:temp tpl temp mustache @page temp)
      (page %contents)
    ) tap @result
  )
) ::

(
  symbol process-md-content
  (dict :meta ==> dict :result)
  (
    meta /content-type :ct
    meta ct process-md-with-template
    @result
  )
) ::

(
  symbol process-content
  (dict :meta ==> dict :result)
  (
    meta /ext :ext
    meta /id :id
    meta
    (
      ((".md" ext ==) (process-md-content))
    ) case
    @result
  )
) ::

(
  symbol process-css-asset
  (dict :meta ==>)
  (
    "" :contents
    meta (
      (input-fread @contents meta)
      (:temp contents preprocess-css @contents temp)
      (contents %contents)
    ) tap
    output-fwrite
  )
) ::

(
  symbol process-mmm-json
  (dict :data ==>)
  (
    timestamp :ts
    data input-fread from-json :contents
    ; Save modules
    contents /modules @modules
    ; Update timestamp
    contents ts %updated @contents
    data contents to-json %contents
    output-fwrite
    ; Add timesyamp file
    {
      "mmm.timestamp" :path
      "mmm" :id
      ".timestamp"    :ext
      "asset"         :type
    } 
    ts string %contents
    output-fwrite
  ) 
) ::

(
  symbol download-latest-min-exes
  (==>)
  (
    "Downloading latest min executables..." notice!
    settings /version :version
    ("windows" "macosx" "linux")
    (
      :opsys
      "https://github.com/h3rald/min/releases/download/v$1/min_v$1_$2_x64.zip" (version opsys) =% :remote
      "min_$#.zip" (opsys) =% :local
      "wget $# -O $#" (remote local) =% :cmd
      cmd system 
      "assets/downloads/$#/" (opsys) =% :dir
      "assets/downloads/" mkdir
      "unzip $# -o -d $#" (local dir) =% @cmd
      cmd system!
      local rm
    ) foreach
  )
) ::

;Main

((('wget "" !=) ('zip which "" !=)) &&)
  (download-latest-min-exes)
when

"Processing contents..." notice!

contents (
  (dict) expect -> :meta
  (
    ((meta /id "^_" match?) ()) ;Ignore files starting with underscore.
    ((true) (meta process-content set-destination output-fwrite)) 
  ) case
) foreach

"Processing assets..." notice!
assets (
  (dict) expect -> :meta
  (
    ((meta /ext ".css" ==) (meta process-css-asset))
    ((meta /path "mmm.json" ==) (meta process-mmm-json))
    ((true) (meta output-cp))
  ) case
) foreach

"Generating mmm index..." notice!
; Process deps of each module -> name@version
modules (
  :module
  module /deps dkeys (
    :name
    module /deps name dget :version
    "$#@$#" (name version) =%
  ) map ", " join :dependencies
  (dependencies "" ==)
    ("n/a" @dependencies)
  when
  module dependencies %dependencies
) map @modules

{}
  "mmm/index"         %id
  "mmm.html"          %path
  ".html"             %ext
  "mmm"               %title
  "min language"      %site
  "page"              %content-type
  modules             %modules 
dup
"mmm" swap mustache %contents output-fwrite

"Generating news page..." notice!
; Get news
contents 
  (:content ((content 'content-type dhas?) (content /content-type "post" ==)) &&)
filter 
  (:a :b a /date  b /date >) 
sort :posts

{}
  "news/index"     %id
  "news.html"      %path
  ".html"          %ext
  "News"           %title
  "min language"   %site
  "page"           %content-type
  posts            %posts 
dup
"news" swap mustache %contents output-fwrite

{}
  "rss"                       %id
  "rss.xml"                   %path
  ".xml"                      %ext
  "min programming language"  %title
  "min language"              %site
  "rss"                       %content-type
  posts                       %posts 
dup
"rss" swap mustache %contents output-fwrite


