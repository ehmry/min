'hastysite import

;Routing
(
  (dict) expect -> :meta
  meta /id :id
  meta /ext :ext
  (
    ((id "home" ==) (
      meta (
        ("index" %id)
        (".html" %ext)
      ) tap
    ))
    ((ext ".md" ==) (
      meta (
        (".html" %ext)
        ("$1/index" (id) => % %id)
      ) tap
    ))
  ) case
) ^set-destination

; Syntax highlighter
(
  symbol span
  (str :class str :value ==> str :result)
  (
      "<span class=\"min-$#\">$#</span>" (class value) =% @result
  )
) ::

(
  symbol highlight
  (dict :token ==> str :result)
  (
      token /value :value
      token /type :type
      (
          ((type "tkEof" ==) ("" @result))
          ((type "tkSpace" ==) (value @result))
          ((type "tkBlockComment" ==) (type "#|$#|#" (value) =% span @result))
          ((type "tkBlockDocComment" ==) (type "#||$#||#" (value) =% span @result))
          ((type "tkLineComment" ==) (type ";$#" (value) =% span @result))
          ((type "tkLineDocComment" ==) (type ";;$#" (value) =% span @result))
          ((type "tkString" ==) (type "\"$#\"" (value) =% span @result))
          ((true) (type value span @result))
      ) case
  )
) ::

(
  symbol min-block-highlight
  (str :code ==> str :result)
  (
    code tokenize 'highlight map "" join :code
    "<div class='min-codeblock'>$#</div>" (code) =% @result
  )
) ::

(
  symbol min-inline-highlight
  (str :code ==> str :result)
  (
    code tokenize 'highlight map "" join :code
    "<span class='min-code'>$#</span>" (code) =% @result
  )
) ::

(
  symbol highlight-min-codeblocks
  (str :html ==> str :result)
  (
    html "<pre>\s*<code>((?:.|\n)*?)<\/code>\s*<\/pre>" 
    (1 get min-block-highlight) replace-apply @result
  )
) ::

(
  symbol highlight-min-codes
  (str :html ==> str :result)
  (
    html "<code>(.*?)<\/code>" 
    (1 get min-inline-highlight) replace-apply @result
  )
) ::

;Processing operators
(
  ('sym dict) expect -> :tpl :meta
  "" :page
  "" :contents
  meta (
    (input-fread @contents meta)
    (settings /title %site)
    (settings /version %version)
    (
      :temp contents temp markdown 
      highlight-min-codeblocks highlight-min-codes @contents temp
    )
    (contents %contents)
    (:temp tpl temp mustache @page temp)
    (page %contents)
  ) tap
) ^process-md-with-template

(
  (dict) expect -> :meta
  meta /content-type :ct
  meta ct process-md-with-template
) ^process-md-content

(
  (dict) expect -> :meta
  meta /ext :ext
  meta
  (
    ((".md" ext ==) (process-md-content))
  ) case
) ^process-content

(
  (dict) expect -> :meta
  "" :contents
  meta (
    (input-fread @contents meta)
    (:temp contents preprocess-css @contents temp)
    (contents %contents)
  ) tap
  output-fwrite
) ^process-css-asset

(
  "Downloading latest min executables..." notice!
  settings /version :version
  ("windows" "macosx" "linux")
  (
    :opsys
    "https://github.com/h3rald/min/releases/download/v$1/min_v$1_$2_x64.zip" (version opsys) =% :remote
    "min_$#.zip" (opsys) =% :local
    "wget $# -O $#" (remote local) =% :cmd
    cmd system 
    "assets/downloads/$#/" (opsys) =% :dir
    "assets/downloads/" mkdir
    "unzip $# -o -d $#" (local dir) =% @cmd
    cmd system!
    local rm
  ) foreach
) ^download-latest-min-exes

;Main

((('wget "" !=) ('zip which "" !=)) &&)
  (download-latest-min-exes)
when


"Processing contents..." notice!
contents (
  (dict) expect -> 
  dup
  (
    ((/id "^_" match?) ()) ;Ignore files starting with underscore.
    ((true) (process-content set-destination output-fwrite)) 
  ) case
) foreach

"Processing assets..." notice!
assets (
  (dict) expect -> 
  dup
  (
    ((/ext ".css" match?) (process-css-asset))
    ((true) (output-cp))
  ) case
) foreach
